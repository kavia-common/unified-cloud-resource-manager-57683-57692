{"is_source_file": true, "format": "JavaScript (React JSX)", "description": "React component implementing an inventory dashboard with resource management, filters, mock data loading, and inline actions.", "external_files": ["../../lib/supabaseClient", "../../components/ui/Table", "../../components/ui/Modal", "../../components/ui/Filters", "../../components/ui/Charts", "../../lib/providers", "../../lib/cloudApi"], "external_methods": ["supabase.from", "supabase.select", "supabase.insert", "postCloudAction", "providerRegistry.getAllProviders", "provider.getInventory"], "published": ["default"], "classes": [], "methods": [{"name": "useResources()", "description": "Custom hook to fetch and manage resource rows from the 'resources' table, including loading state and refresh function.", "scope": "", "scopeKind": ""}, {"name": "OperationModal({ open, onClose, resource, onSubmit })", "description": "React component for displaying a modal to perform operations (start, stop, scale) on a resource.", "scope": "", "scopeKind": ""}, {"name": "Inventory()", "description": "Main React component for displaying resource inventory, filters, mock data, and inline resource controls with modal operations.", "scope": "", "scopeKind": ""}, {"name": "run()", "description": "Handles executing the selected resource operation within the modal.", "scope": "OperationModal", "scopeKind": "function"}, {"name": "refresh", "description": "Refreshes resource data from the backend."}, {"name": "loadMock()", "description": "Loads mock inventory data from various providers and updates component state.", "scope": "Inventory", "scopeKind": "function"}, {"name": "handleGcpAction(row, action)", "description": "Performs mock GCP start/stop actions and updates UI optimistically.", "scope": "Inventory", "scopeKind": "function"}, {"name": "runOperation(op, params)", "description": "Inserts a new operation record into the 'operations' table to trigger backend processing.", "scope": "Inventory", "scopeKind": "function"}], "calls": ["supabase.from(\"resources\").select(\"*\").order(\"updated_at\", { ascending: false })", "setRows(data)", "supabase.from(\"operations\").insert({...})", "providerRegistry.getAllProviders()", "provider.getInventory()", "postCloudAction(\"gcp\", \"action/start\", { id: r.id })", "postCloudAction(\"aws\", \"action/start\", { id: r.id })", "postCloudAction(\"azure\", \"action/stop\", { id: r.id })"], "search-terms": ["Inventory.jsx", "React inventory dashboard", "resource management", "mock cloud data", "GCP start stop", "providerRegistry", "supabase", "operation modal"], "state": 2, "file_id": 29, "knowledge_revision": 257, "git_revision": "4b3affe32c78e2a2e4249c89d11992db59db37d4", "revision_history": [{"49": ""}, {"84": "60c4f3eae35b9cb3702b66750777fea4b8bd3743"}, {"85": "60c4f3eae35b9cb3702b66750777fea4b8bd3743"}, {"91": "f7c17f8f68feed6f8f6810456e6a86b0f8f4eb25"}, {"131": "73435f89e890f0d511598eb3e8b4844d07aab3de"}, {"132": "73435f89e890f0d511598eb3e8b4844d07aab3de"}, {"138": "3eb38304caa65c3a6a4b75d717d40a4a2a5ab883"}, {"145": "6ea759430a00328a0ff34c373b5bd7787db18c85"}, {"199": "6ea759430a00328a0ff34c373b5bd7787db18c85"}, {"201": "6ea759430a00328a0ff34c373b5bd7787db18c85"}, {"202": "6ea759430a00328a0ff34c373b5bd7787db18c85"}, {"219": "84502cb31a761dcababe673750eb3184e8680d5f"}, {"220": "84502cb31a761dcababe673750eb3184e8680d5f"}, {"227": "84502cb31a761dcababe673750eb3184e8680d5f"}, {"232": "84502cb31a761dcababe673750eb3184e8680d5f"}, {"233": "84502cb31a761dcababe673750eb3184e8680d5f"}, {"249": "84502cb31a761dcababe673750eb3184e8680d5f"}, {"251": "84502cb31a761dcababe673750eb3184e8680d5f"}, {"257": "4b3affe32c78e2a2e4249c89d11992db59db37d4"}], "ctags": [{"_type": "tag", "name": "Inventory", "path": "/home/kavia/workspace/code-generation/unified-cloud-resource-manager-57683-57692/react_frontend_dashboard/src/features/inventory/Inventory.jsx", "pattern": "/^export default function Inventory() {$/", "language": "JavaScript", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "OperationModal", "path": "/home/kavia/workspace/code-generation/unified-cloud-resource-manager-57683-57692/react_frontend_dashboard/src/features/inventory/Inventory.jsx", "pattern": "/^function OperationModal({ open, onClose, resource, onSubmit }) {$/", "language": "JavaScript", "kind": "function", "signature": "({ open, onClose, resource, onSubmit })"}, {"_type": "tag", "name": "[ { value: \"aws\", label: \"AWS\" }, { value: \"azure\", label: \"Azure\" }, { value: \"gcp\", label: \"GCP\" }, ]", "path": "/home/kavia/workspace/code-generation/unified-cloud-resource-manager-57683-57692/react_frontend_dashboard/src/features/inventory/Inventory.jsx", "pattern": "/^            { value: \"aws\", label: \"AWS\" },$/", "language": "JavaScript", "kind": "field", "scope": "Inventory.providerOptions", "scopeKind": "class"}, {"_type": "tag", "name": "[]} regionOptions={[ { value: \"us-east-1\", label: \"us-east-1\" }, { value: \"us-west-2\", label: \"us-west-2\" }, ]} serviceOptions={[]} tagOptions={[]} /> <div style={{ height: 10 }} /> <DataTable columns={columns} rows={filtered} emptyMessage=\"No resources discovered yet.\" /> <div style={{ height: 16 }} /> <div className=\"panel\" style={{ border: \"1px dashed var(--border)\" }}> <div className=\"panel-header\"> <div className=\"panel-title\">Fleet Spend Sparkline</ <div className=\"badge\">Preview</ </ <div className=\"panel-body\"> <TrendLineChart data={(() => {  const n = 14; const avgDaily = filtered.reduce((s, r) => s + Number(r.cost_daily || 0), 0); return new Array(n).fill(0).map((_, i) => ({ date: new Date(Date.now() - (n - i - 1) * 86400000) .toISOString() .slice(5, 10), value: Number( (avgDaily * (0.9 + Math.random() * 0.2)).toFixed(2) ), })); })()} dataKey=\"value\" xKey=\"date\" gradient color=\"#10B981\" height={160} /> </ </ <div style={{ height: 16 }} /> <div className=\"panel\" style={{ border: \"1px dashed var(--border)\" }}> <div className=\"panel-header\"> <div className=\"panel-title\">Cloud Mock Data (Edge Functions)</ <div style={{ display: \"flex\", gap: 10 }}> <button className=\"btn\" onClick={loadMock} disabled={mockLoading}> {mockLoading ? \"Loading...\" : \"Load from mock-aws/mock-azure/mock-gcp\"} </ </ </ <div className=\"panel-body\"> {mockError && <div className=\"badge error\">Error: {mockError}</ <div style={{ display: \"grid\", gap: 16, gridTemplateColumns: \"repeat(12, minmax(0, 1fr))\", }} > {} <div className=\"card\" style={{ gridColumn: \"span 12\" }}> <div style={{ display: \"flex\", justifyContent: \"space-between\", marginBottom: 8, }} > <div className=\"panel-title\">AWS \u2014 EC2 + RDS</ <div className=\"badge\">mock-aws</ </ <DataTable columns={[ ...baseColumns, { key: \"actions\", label: \"Actions\", render: (_v, r) => ( <div style={{ display: \"flex\", gap: 8 }}> <button className=\"btn\" disabled={r._updating || r.status === \"running\"} onClick={async () => { setAwsRows((prev) => prev.map((x) => x.id === r.id ? { ...x, _updating: true } : x ) ); const { error } = await postCloudAction( \"aws\", \"action/start\", { id: r.id } ); setAwsRows((prev) => prev.map((x) => x.id === r.id ? { ...x, status: error ? x.status : \"running\", _updating: false, } : x ) ); }} > {r._updating && r.status !== \"running\" ? \"Starting...\" : \"Start\"} </ <button className=\"btn destructive\" disabled={r._updating || r.status === \"stopped\"} onClick={async () => { setAwsRows((prev) => prev.map((x) => x.id === r.id ? { ...x, _updating: true } : x ) ); const { error } = await postCloudAction( \"aws\", \"action/stop\", { id: r.id } ); setAwsRows((prev) => prev.map((x) => x.id === r.id ? { ...x, status: error ? x.status : \"stopped\", _updating: false, } : x ) ); }} > {r._updating && r.status !== \"stopped\" ? \"Stopping...\" : \"Stop\"} </ </ ), }, ]} rows={awsRows} emptyMessage=\"No data from mock-aws.\" /> </ {} <div className=\"card\" style={{ gridColumn: \"span 6\" }}> <div style={{ display: \"flex\", justifyContent: \"space-between\", marginBottom: 8, }} > <div className=\"panel-title\">Azure \u2014 VMs</ <div className=\"badge\">mock-azure</ </ <DataTable columns={[ ...baseColumns, { key: \"actions\", label: \"Actions\", render: (_v, r) => ( <div style={{ display: \"flex\", gap: 8 }}> <button className=\"btn\" disabled={r._updating || r.status === \"running\"} onClick={async () => { setAzureVMRows((prev) => prev.map((x) => x.id === r.id ? { ...x, _updating: true } : x ) ); const { error } = await postCloudAction( \"azure\", \"action/start\", { id: r.id } ); setAzureVMRows((prev) => prev.map((x) => x.id === r.id ? { ...x, status: error ? x.status : \"running\", _updating: false, } : x ) ); }} > {r._updating && r.status !== \"running\" ? \"Starting...\" : \"Start\"} </ <button className=\"btn destructive\" disabled={r._updating || r.status === \"stopped\"} onClick={async () => { setAzureVMRows((prev) => prev.map((x) => x.id === r.id ? { ...x, _updating: true } : x ) ); const { error } = await postCloudAction( \"azure\", \"action/stop\", { id: r.id } ); setAzureVMRows((prev) => prev.map((x) => x.id === r.id ? { ...x, status: error ? x.status : \"stopped\", _updating: false, } : x ) ); }} > {r._updating && r.status !== \"stopped\" ? \"Stopping...\" : \"Stop\"} </ </ ), }, ]} rows={azureVMRows} emptyMessage=\"No VM data from mock-azure.\" /> </ <div className=\"card\" style={{ gridColumn: \"span 6\" }}> <div style={{ display: \"flex\", justifyContent: \"space-between\", marginBottom: 8, }} > <div className=\"panel-title\">Azure \u2014 Storage (with cost)</ <div className=\"badge\">mock-azure</ </ <DataTable columns={baseColumns} rows={azureStorageRows} emptyMessage=\"No Storage data from mock-azure.\" /> </ {} <div className=\"card\" style={{ gridColumn: \"span 12\" }}> <div style={{ display: \"flex\", justifyContent: \"space-between\", marginBottom: 8, }} > <div className=\"panel-title\">GCP \u2014 Compute Engine</ <div className=\"badge\">mock-gcp</ </ <DataTable columns={gcpColumns} rows={gcpRows} emptyMessage=\"No Compute Engine data from mock-gcp.\" /> </ </ </ </ </ <OperationModal open={openOp} onClose={() => setOpenOp(false)} resource={selected} onSubmit={runOperation} /> </ ); }", "path": "/home/kavia/workspace/code-generation/unified-cloud-resource-manager-57683-57692/react_frontend_dashboard/src/features/inventory/Inventory.jsx", "pattern": "/^          accountOptions={[]}$/", "language": "JavaScript", "kind": "field", "scope": "Inventory.accountOptions", "scopeKind": "class"}, {"_type": "tag", "name": "filters", "path": "/home/kavia/workspace/code-generation/unified-cloud-resource-manager-57683-57692/react_frontend_dashboard/src/features/inventory/Inventory.jsx", "pattern": "/^          values={filters}$/", "language": "JavaScript", "kind": "field", "scope": "Inventory.values", "scopeKind": "class"}, {"_type": "tag", "name": "handleGcpAction", "path": "/home/kavia/workspace/code-generation/unified-cloud-resource-manager-57683-57692/react_frontend_dashboard/src/features/inventory/Inventory.jsx", "pattern": "/^  async function handleGcpAction(row, action) {$/", "language": "JavaScript", "kind": "function", "signature": "(row, action)", "scope": "Inventory", "scopeKind": "function"}, {"_type": "tag", "name": "loadMock", "path": "/home/kavia/workspace/code-generation/unified-cloud-resource-manager-57683-57692/react_frontend_dashboard/src/features/inventory/Inventory.jsx", "pattern": "/^  async function loadMock() {$/", "language": "JavaScript", "kind": "function", "signature": "()", "scope": "Inventory", "scopeKind": "function"}, {"_type": "tag", "name": "name || \"\"}", "path": "/home/kavia/workspace/code-generation/unified-cloud-resource-manager-57683-57692/react_frontend_dashboard/src/features/inventory/Inventory.jsx", "pattern": "/^      title={`Operate: ${resource?.name || \"\"}`}$/", "language": "JavaScript", "kind": "field", "scope": "OperationModal.title.Operate: ${resource?", "scopeKind": "class"}, {"_type": "tag", "name": "onClose", "path": "/home/kavia/workspace/code-generation/unified-cloud-resource-manager-57683-57692/react_frontend_dashboard/src/features/inventory/Inventory.jsx", "pattern": "/^      onClose={onClose}$/", "language": "JavaScript", "kind": "field", "scope": "OperationModal.onClose", "scopeKind": "class"}, {"_type": "tag", "name": "open", "path": "/home/kavia/workspace/code-generation/unified-cloud-resource-manager-57683-57692/react_frontend_dashboard/src/features/inventory/Inventory.jsx", "pattern": "/^      open={open}$/", "language": "JavaScript", "kind": "field", "scope": "OperationModal.open", "scopeKind": "class"}, {"_type": "tag", "name": "operation", "path": "/home/kavia/workspace/code-generation/unified-cloud-resource-manager-57683-57692/react_frontend_dashboard/src/features/inventory/Inventory.jsx", "pattern": "/^            value={operation}$/", "language": "JavaScript", "kind": "field", "scope": "OperationModal.value", "scopeKind": "class"}, {"_type": "tag", "name": "run", "path": "/home/kavia/workspace/code-generation/unified-cloud-resource-manager-57683-57692/react_frontend_dashboard/src/features/inventory/Inventory.jsx", "pattern": "/^  async function run() {$/", "language": "JavaScript", "kind": "function", "signature": "()", "scope": "OperationModal", "scopeKind": "function"}, {"_type": "tag", "name": "runOperation", "path": "/home/kavia/workspace/code-generation/unified-cloud-resource-manager-57683-57692/react_frontend_dashboard/src/features/inventory/Inventory.jsx", "pattern": "/^  async function runOperation(op, params) {$/", "language": "JavaScript", "kind": "function", "signature": "(op, params)", "scope": "Inventory", "scopeKind": "function"}, {"_type": "tag", "name": "setFilters", "path": "/home/kavia/workspace/code-generation/unified-cloud-resource-manager-57683-57692/react_frontend_dashboard/src/features/inventory/Inventory.jsx", "pattern": "/^          onChange={setFilters}$/", "language": "JavaScript", "kind": "field", "scope": "Inventory.onChange", "scopeKind": "class"}, {"_type": "tag", "name": "useResources", "path": "/home/kavia/workspace/code-generation/unified-cloud-resource-manager-57683-57692/react_frontend_dashboard/src/features/inventory/Inventory.jsx", "pattern": "/^function useResources() {$/", "language": "JavaScript", "kind": "function", "signature": "()"}], "hash": "444703349ee68b1be4f51e76c598ce59", "format-version": 4, "code-base-name": "react_frontend_dashboard", "filename": "react_frontend_dashboard/src/features/inventory/Inventory.jsx", "fields": [{"name": "{ value: \"aws\", label: \"AWS\" },", "scope": "Inventory.providerOptions", "scopeKind": "class", "description": "unavailable"}, {"name": "accountOptions={[]}", "scope": "Inventory.accountOptions", "scopeKind": "class", "description": "unavailable"}, {"name": "values={filters}", "scope": "Inventory.values", "scopeKind": "class", "description": "unavailable"}, {"name": "title={`Operate: ${resource?.name || \"\"}`}", "scope": "OperationModal.title.Operate: ${resource?", "scopeKind": "class", "description": "unavailable"}, {"name": "onClose={onClose}", "scope": "OperationModal.onClose", "scopeKind": "class", "description": "unavailable"}, {"name": "open={open}", "scope": "OperationModal.open", "scopeKind": "class", "description": "unavailable"}, {"name": "value={operation}", "scope": "OperationModal.value", "scopeKind": "class", "description": "unavailable"}, {"name": "onChange={setFilters}", "scope": "Inventory.onChange", "scopeKind": "class", "description": "unavailable"}]}